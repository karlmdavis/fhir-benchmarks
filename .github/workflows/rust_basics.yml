# Builds, tests, checks format of, and lints Rust code.
#
# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md

name: 'CI: Rust Basics'

on: [push]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Try to use cache from this or ancestor branches. Also sets a hook that will cache this build after
      # the job is complete.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Try to use cache from this or ancestor branches. Also sets a hook that will cache this build after
      # the job is complete.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Pull/build the Docker containers ahead of the ITs, so that Docker Compose can pull them from the
      # local cache, rather than having to build them from scratch.
      #
      # This took a while to get correct, but these are the references that helped the most:
      # * <https://docs.docker.com/engine/reference/commandline/build/#specifying-external-cache-sources>
      # * <https://www.docker.com/blog/faster-builds-in-compose-thanks-to-buildkit-support/>
      # * <https://help.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-docker-for-use-with-github-packages>
      #     * Note: This one's a bit outdated, but was still helpful in explaining the general idea.
      - name: Login Docker to GitHub Registry
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: karlmdavis
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Docker Build - synthea
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo 'docker pull'
          docker pull docker.pkg.github.com/karlmdavis/fhir-benchmarks/synthea || true
          echo 'docker build'
          docker build --file ./Dockerfile.synthea --build-arg UID="$(id -u)" --build-arg GID="$(id -g)" -t docker.pkg.github.com/karlmdavis/fhir-benchmarks/synthea --cache-from docker.pkg.github.com/karlmdavis/fhir-benchmarks/synthea --build-arg BUILDKIT_INLINE_CACHE=1 .
          echo 'docker push'
          docker push docker.pkg.github.com/karlmdavis/fhir-benchmarks/synthea
        working-directory: ./synthetic-data

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          RUST_BACKTRACE: full

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Try to use cache from this or ancestor branches. Also sets a hook that will cache this build after
      # the job is complete.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
